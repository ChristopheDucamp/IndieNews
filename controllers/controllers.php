<?php

function getUserVotesForPosts(&$posts) {
  // If the user is logged in, retrieve all their votes for these articles
  $votes = array();

  if($user=getLoggedInUser()) {
    $ids = array();
    foreach($posts as $i=>$post) {
      $ids[] = $post->id;
    }
    if(count($ids) > 0) {
      $results = ORM::for_table('votes')->where('user_id', $user->id)->where_in('post_id', $ids)->find_many();
      foreach($results as $r) {
        $votes[] = $r->post_id;
      }
    }
  }

  return $votes;
}

function getPostsForParentID($parentID) {

  // Check if we need to recalculate the scores yet (only calculate once per hour)
  $last = ORM::for_table('last_computed')->where('parent_id', $parentID)->find_one();
  if($last == false || (time() - strtotime($last['val'])) > 3600) {
    $posts = ORM::for_table('posts')->raw_execute('
      UPDATE posts 
      SET score = (points-1) / POWER(GREATEST(1, TIMESTAMPDIFF(HOUR, date_submitted, NOW())), 1.8)
      WHERE parent_id = ' . $parentID . '
    ');
    if($last == false) {
      $last = ORM::for_table('last_computed')->create();
      $last->parent_id = $parentID;
    }
    $last->date = date('Y-m-d H:i:s');
    $last->save();
  }

  return ORM::for_table('posts')->raw_query('
    SELECT *, GREATEST(1, TIMESTAMPDIFF(HOUR, date_submitted, NOW())) AS age
    FROM posts
    WHERE parent_id = ' . $parentID . '
    ORDER BY score DESC, points DESC, date_submitted DESC
  ')->find_many();
}

function respondWithFormat($app, $html, $format) {
  $res = $app->response();
  if($format == 'json') {
    $parser = new mf2\Parser($html);
    $output = $parser->parse();
    $output['note'][] = "This JSON is automatically generated by parsing the microformats from the HTML representation of this page using the php-mf2 library.";
    $output['note'][] = "You can find the php-mf2 library at github.com/indieweb/php-mf2";
    $output['note'][] = "If you see a problem with the output, please let me know! (github.com/aaronpk/IndieNews/issues)";
    $res['Content-Type'] = 'application/json';
    $res->body(json_encode($output));
  } else {
    $res->body($html);
  }
}

// Strip the http:// prefix
function slugForURL($url) {
  return preg_replace('/https?:\/\//', '', $url);
}

// Home Page
$app->get('/(home.:format)', function($format='html') use($app) {

  $req = $app->request();

  $posts = getPostsForParentID(0);
  $votes = getUserVotesForPosts($posts);

  ob_start();
  render('posts', array(
    'title' => 'IndieNews - Front Page',
    'posts' => $posts,
    'votes' => $votes,
    'view' => 'list',
    'meta' => ''
  ));
  $html = ob_get_clean();
  respondWithFormat($app, $html, $format);
})->conditions(array('format'=>'json'));

// Newest
$app->get('/newest(.:format)', function($format='html') use($app) {

  $req = $app->request();

  $posts = ORM::for_table('posts')->where('parent_id', 0)->order_by_desc('date_submitted')->limit(20)->find_many();
  $votes = getUserVotesForPosts($posts);

  ob_start();
  render('posts', array(
    'title' => 'IndieNews - Newest Submissions',
    'posts' => $posts,
    'votes' => $votes,
    'view' => 'list',
    'meta' => ''
  ));
  $html = ob_get_clean();
  respondWithFormat($app, $html, $format);
})->conditions(array('format'=>'json'));

// Post IDs. Redirect to the post URL version
$app->get('/post/:id(.:format)', function($id, $format='html') use($app) {

  $post = ORM::for_table('posts')->where('id', $id)->find_one();

  if(!$post) {
    $app->pass(); // Will trigger a 404 error
  }

  $app->redirect('http://' . $_SERVER['SERVER_NAME'] . '/post/' . slugForURL($post->href) . ($format == 'html' ? '' : '.'.$format), 302);

})->conditions(array('id'=>'\d+', 'format'=>'json'));


$app->get('/post/:slug(.:format)', function($slug, $format='html') use($app) {

  $post = ORM::for_table('posts')->where('href', 'http://'.$slug)->find_one();
  $posts = array($post);

  if(!$post) {
    $app->pass(); // Will trigger a 404 error
  }

  $votes = getUserVotesForPosts($posts);

  $replies = getPostsForParentID($post->id);
  $votes = array_merge($votes, getUserVotesForPosts($replies));

  ob_start();
  render('post', array(
    'title' => $post->title,
    'post' => $post,
    'parent' => ($post->parent_id ? ORM::for_table('posts')->find_one($post->parent_id) : false),
    'votes' => $votes,
    'replies' => $replies,
    'view' => 'single',
    'meta' => ''
  ));
  $html = ob_get_clean();
  respondWithFormat($app, $html, $format);

})->conditions(array('slug'=>'.+\..+/.+?', 'format'=>'json'));



$app->get('/submit', function() use($app) {
  render('submit', array(
    'title' => 'About IndieNews',
    'meta' => ''
  ));
});
$app->get('/how-to-submit-a-post', function() use($app) {
  render('submit-full', array(
    'title' => 'IndieNews - How to submit a post',
    'meta' => ''
  ));
});
$app->get('/how-to-comment', function() use($app) {
  render('comment-full', array(
    'title' => 'IndieNews - How to comment',
    'meta' => ''
  ));
});
$app->get('/technology', function() use($app) {
  render('technology', array(
    'title' => 'The Technology Behind IndieNews',
    'meta' => ''
  ));
});
$app->get('/constructing-post-urls', function() use($app) {
  render('post-urls', array(
    'title' => 'Constructing Post URLs for IndieNews',
    'meta' => ''
  ));
});

// Log in with IndieAuth
$app->get('/indieauth', function() use($app) {

  $req = $app->request();
  $params = $req->params();

  if(array_key_exists('token', $params)) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, 'https://indieauth.com/session?token=' . $params['token']);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    $auth = json_decode(curl_exec($ch));
    if($auth) {
      $_SESSION['user'] = preg_replace('|https?://|', '', $auth->me);

      // Create the user record if it doesn't yet exist
      $user = ORM::for_table('users')->where('domain', session('user'))->find_one();

      if($user == FALSE) {
        $user = ORM::for_table('users')->create();
        $user->domain = session('user');
        $user->date_created = date('Y-m-d H:i:s');
        $user->save();
      }

    }
    $app->redirect('/', 301);
  }

  $app->redirect('/', 301);
});

$app->get('/signout', function() use($app) {
  unset($_SESSION['user']);
  $app->redirect('/', 301);
});

$app->post('/vote', function() use($app) {

  $req = $app->request();
  $params = $req->params();
  $res = $app->response();

  $id = false;
  $points = false;

  if($user=getLoggedInUser()) {

    // Ensure they haven't already voted
    $existing = ORM::for_table('votes')->where('post_id', $params['id'])->where('user_id', $user->id)->find_one();
    if(!$existing) {
      $vote = ORM::for_table('votes')->create();
      $vote->post_id = $params['id'];
      $vote->user_id = $user->id;
      $vote->date = date('Y-m-d H:i:s');
      $vote->save();

      $result = 'ok';
      $id = $params['id'];

      $points = recalculatePoints($params['id']);
      $points = $points . ' point' . ($points == 1 ? '' : 's');
    } else {
      $result = 'already_voted';
      $id = $params['id'];
    }

  } else {
    $result = 'not_logged_in';
  }

  $res['Content-Type'] = 'application/json';
  $res->body(json_encode(array(
    'result' => $result,
    'id' => $id,
    'points' => $points
  )));  
});

$res = $app->response();
$res['X-Pingback'] = 'http://pingback.me/webmention?forward=http://' . $_SERVER['SERVER_NAME'] . '/webmention';
$res['Link'] = '<http://' . $_SERVER['SERVER_NAME'] . '/webmention>; rel="http://webmention.org/"';
